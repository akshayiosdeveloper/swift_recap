Retain Cycle scenario
class Teacher {
    var name: String
    var student: Student?  // ⛔ strong reference back to Student
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

class Student {
    var name: String
    var teacher: Teacher?  // ⛔ strong reference
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

var student: Student? = Student(name: "Alex")
var teacher: Teacher? = Teacher(name: "Mr. Kim")

student?.teacher = teacher
teacher?.student = student

student = nil
teacher = nil

❌ In this case:
student holds a strong reference to teacher

teacher holds a strong reference back to student

Even after setting both to nil, ARC doesn’t deallocate either, because they’re still strongly referring to each other

✅ Solution:
Make one side weak:

==== Another sceanrio one way strong refrence
class Teacher {
    var name: String
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

class Student {
    var name: String
    var teacher: Teacher? // strong reference
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

var student: Student? = Student(name: "Alex")
var teacher: Teacher? = Teacher(name: "Mr. Kim")

student?.teacher = teacher
teacher = nil
student = nil


✅ What Actually Happens
In this exact code, both objects will be deallocated — no retain cycle occurs.

Why?
student holds a strong reference to teacher

When teacher = nil, it removes the external reference, but student still holds a reference, so teacher is not deallocated yet

Then when you do student = nil, both student and teacher no longer have any strong references — so both get deallocated

✔ No cycle here — just a one-way strong reference.



======= Impact of denit method when use difference senario

| Case                     | Will Deinit Be Called? |
| ------------------------ | ---------------------- |
| One-way strong reference | ✅ Yes                  |
| Two-way strong reference | ❌ No (retain cycle)    |
| One side weak / unowned  | ✅ Yes                  |
