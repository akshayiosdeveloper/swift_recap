Retain Cycle scenario
class Teacher {
    var name: String
    var student: Student?  // ⛔ strong reference back to Student
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

class Student {
    var name: String
    var teacher: Teacher?  // ⛔ strong reference
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

var student: Student? = Student(name: "Alex")
var teacher: Teacher? = Teacher(name: "Mr. Kim")

student?.teacher = teacher
teacher?.student = student

student = nil
teacher = nil

❌ In this case:
student holds a strong reference to teacher


===== Day 2 on arc ===


teacher holds a strong reference back to student

Even after setting both to nil, ARC doesn’t deallocate either, because they’re still strongly referring to each other

✅ Solution:
Make one side weak:

==== Another sceanrio one way strong refrence
class Teacher {
    var name: String
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

class Student {
    var name: String
    var teacher: Teacher? // strong reference
    init(name: String) { self.name = name }
    deinit { print("\(name) deallocated") }
}

var student: Student? = Student(name: "Alex")
var teacher: Teacher? = Teacher(name: "Mr. Kim")

student?.teacher = teacher
teacher = nil
student = nil


✅ What Actually Happens
In this exact code, both objects will be deallocated — no retain cycle occurs.

Why?
student holds a strong reference to teacher

When teacher = nil, it removes the external reference, but student still holds a reference, so teacher is not deallocated yet

Then when you do student = nil, both student and teacher no longer have any strong references — so both get deallocated

✔ No cycle here — just a one-way strong reference.



======= Impact of denit method when use difference senario

| Case                     | Will Deinit Be Called? |
| ------------------------ | ---------------------- |
| One-way strong reference | ✅ Yes                  |
| Two-way strong reference | ❌ No (retain cycle)    |
| One side weak / unowned  | ✅ Yes                  |



===== DAY 2 ON ARC ===

| Declaration                | Optional? | Strong/Weak? | Meaning                                   |
| -------------------------- | --------- | ------------ | ----------------------------------------- |
| `var tenant: Person?`      | ✅         | strong       | Optional strong reference (default)       |
| `weak var tenant: Person?` | ✅         | weak         | Optional weak reference (no retain cycle) |
| `unowned var x: Person`    | ❌         | unowned      | Non-optional weak-like reference          |


====== Weak vs Unowned ====

| Use this... | When the reference can become `nil` | When the reference **should never** be `nil`    |
| ----------- | ----------------------------------- | ----------------------------------------------- |
| `weak`      | ✅ Yes (use optional `?`)            | ❌ No                                            |
| `unowned`   | ❌ No (non-optional)                 | ✅ Yes, it must always exist during its lifetime |


## ✅ weak – Use When the Reference Can Become Nil
## Scenario: A Person may or may not have an Apartment, and vice versa.
class Person {
    let name: String
    var apartment: Apartment?

    init(name: String) {
        self.name = name
    }

    deinit {
        print("Person \(name) deinitialized")
    }
}

class Apartment {
    let number: Int
    weak var tenant: Person?  // ✅ Use weak here

    init(number: Int) {
        self.number = number
    }

    deinit {
        print("Apartment \(number) deinitialized")
    }
}

✅ unowned – Use When the Reference Must Always Exist
Scenario: A CreditCard always belongs to a Customer. Once the customer is deallocated, the card should be too.

class Customer {
    let name: String
    var card: CreditCard?

    init(name: String) {
        self.name = name
    }

    deinit {
        print("Customer \(name) deinitialized")
    }
}

class CreditCard {
    let number: Int
    unowned let customer: Customer  // ✅ Use unowned here

    init(number: Int, customer: Customer) {
        self.number = number
        self.customer = customer
    }

    deinit {
        print("CreditCard \(number) deinitialized")
    }
}
